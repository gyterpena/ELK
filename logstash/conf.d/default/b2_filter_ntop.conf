#filter {
# if [type] == "netflow-nt" {
#  mutate {
#      rename => { "CLIENT_NW_LATENCY_MS" => "client_nw_latency_ms" 
#                "DNS_QUERY" => "dns_query"
#                "INTERFACE" => "interface"
#                "IN_BYTES" => "in_bytes"
#                "IN_PKTS" => "in_pkts"
#                "L7_PROTO" => "l7_protocol_name"
#                "LAST_SWITCHED" => "[netflow][last_switched]"
#                "OUT_BYTES" => "[netflow][out_bytes]"
#                "OUT_PKTS" => "[netflow][out_pkts]"
#                "PROTOCOL" => "[netflow][protocol]"
#                "SERVER_NW_LATENCY_MS" => "server_nw_latency_ms"
#                "TCP_FLAGS" => "[netflow][tcp_flags]"
#                "L4_DST_PORT" => "[netflow][dst_port]"
#                "L4_SRC_PORT" => "[netflow][src_port]"
#                "L6_DST_PORT" => "[netflow][dst_port]"
#                "L6_SRC_PORT" => "[netflow][src_port]"
#                "FIRST_SWITCHED" => "[netflow][first_switched]"
#                "IN_SRC_MAC" => "[src][mac]"
#                "OUT_SRC_MAC" => "[src][mac]"
#                "IN_DST_MAC" => "[dst][mac]"
#                "OUT_DST_MAC" => "[dst][mac]"
#                "L7_PROTO_NAME" => "l7_proto_name"
#                "BITTORRENT_HASH" => "bittorrent_hast"
#                "HTTP_HOST" => "[http][hostname]"
#                "HTTP_METHOD" => "[http][http_method]"
#                "HTTP_RET_CODE" => "[http][status]"
#                "HTTP_URL" => "[http][url]"
#                "SSL_SERVER_NAME" => "[tls][sni]"
#        }
#  }
#     if [netflow][first_switched] {
#           date {
#               match => [ "[netflow][first_switched]", "UNIX" ]
#           }
#       }
#       if [netflow][first_switched] and [netflow][last_switched] {
#        date {
#            match => ["[netflow][first_switched]", "UNIX"]
#            target => "[netflow][first_switched]"
#        }
#        date {
#            match => ["[netflow][last_switched]", "UNIX"]
#            target => "[netflow][last_switched]"
#        }
#          ruby {
#              init => "require 'time'"
#              code => "event.set('flow_duration',(event.get('[netflow][last_switched]').to_i - event.get('[netflow][first_switched]').to_i))"
#          }
#          ruby {
#              init => "require 'time'"
#              code => "if event.get('flow_duration') < 0 then event.set('flow_duration',event.get('flow_duration').to_i + 86400) end"
#          }
#        }
#
## Process Netflow v9 events.
#
#        if [IPV4_SRC_ADDR] or [IPV4_DST_ADDR] {
#            mutate {
#                id => "netflow-nt-v9-normalize-ip_version4"
#                add_field => { "[netflow][ip_version]" => "IPv4" }
#            }
#        }
#        if [IPV6_SRC_ADDR] or [IPV6_DST_ADDR] {
#            mutate {
#                id => "netflow-nt-v9-normalize-ip_version6"
#                add_field => { "[netflow][ip_version]" => "IPv6" }
#            }
#        }
#        # Populate fields with IPv4 or IPv6 specific fields.
#        if [IPV4_SRC_ADDR] or [IPV4_DST_ADDR]{
#            if [IPV4_SRC_ADDR] {
#                mutate {
#                    id => "netflow-v9-normalize-src_addr-from-IPV4_SRC_ADDR"
#                    rename => { "[IPV4_SRC_ADDR]" => "[netflow][src_addr]" }
#                }
#            }
#            if [IPV4_DST_ADDR] {
#                mutate {
#                    id => "netflow-v9-normalize-dst_addr-from-IPV4_DST_ADDR"
#                    rename => { "[IPV4_DST_ADDR]" => "[netflow][dst_addr]" }
#                }
#            }
#            if [ipv4_next_hop] {
#                mutate {
#                    id => "netflow-nt-v9-normalize-next_hop-from-ipv4_next_hop"
#                    rename => { "[ipv4_next_hop]" => "[next_hop]" }
#                }
#            }
#        } else if [IPV6_SRC_ADDR] or [IPV6_DST_ADDR] {
#            if [IPV6_SRC_ADDR] {
#                mutate {
#                    id => "netflow-v9-normalize-src_addr-from-IPV6_SRC_ADDR"
#                    rename => { "[IPV6_SRC_ADDR]" => "[netflow][src_addr]" }
#                }
#            }
#            if [IPV6_DST_ADDR] {
#                mutate {
#                    id => "netflow-v9-normalize-dst_addr-from-IPV6_DST_ADDR"
#                    rename => { "[IPV6_DST_ADDR]" => "[netflow][dst_addr]" }
#                }
#            }
#            if [ipv6_next_hop] {
#                mutate {
#                    id => "netflow-nt-v9-normalize-next_hop-from-ipv6_next_hop"
#                    rename => { "[ipv6_next_hop]" => "[netflow][next_hop]" }
#                }
#            }
#        } else {
#            # Did not recognize IP version.
#            mutate {
#                id => "netflow-nt-ip-version-not-recognized"
#                add_tag => [ "__netflow_ip_version_not_recognized" ]
#            }
#        }
#        # Populate bytes transferred in the flow.
#        if [in_bytes] != 0 {
#            mutate {
#                id => "netflow-v9-normalize-bytes-from-IN_BYTES"
#                rename => { "[in_bytes]" => "[netflow][bytes]" }
#                add_field => { "direction" => "in" }
#            }
#        } else if [out_bytes] != 0 {
#            mutate {
#                id => "netflow-v9-normalize-bytes-from-OUT_BYTES"
#                rename => { "[out_bytes]" => "[netflow][bytes]" }
#                add_field => { "direction" => "out" }
#            }
#        } 
#        
#        if [netflow][bytes] {
#            mutate {
#                id => "netflow-nt-v9-normalize-convert-bytes"
#                convert => { "[bytes]" => "integer" }
#            }
#        }
#
#        # Populate packets transferred in the flow.
#        if [in_pkts] != 0{
#            mutate {
#                id => "netflow-v9-normalize-packets-from-IN_PKTS"
#                rename => { "[in_pkts]" => "[netflow][packets]" }
#            }
#        } else if [out_pkts] != 0 {
#            mutate {
#                id => "netflow-v9-normalize-packets-from-OUT_PKTS"
#                rename => { "[out_pkts]" => "[netflow][packets]" }
#            }
#        } else if [in_permanent_pkts] {
#            mutate {
#                id => "netflow-nt-v9-normalize-packets-from-in_permanent_pkts"
#                rename => { "[in_permanent_pkts]" => "[netflow][packets]" }
#            }
#        }
#        if [netflow][packets] {
#            mutate {
#                id => "netflow-nt-v9-normalize-convert-packets"
#                convert => { "[packets]" => "integer" }
#            }
#        }
#        # Populate TOS if available.
#        if [src_tos] {
#            mutate {
#                id => "netflow-nt-v9-normalize-tos-from-src_tos"
#                rename => { "[src_tos]" => "[netflow][tos]" }
#            }
#        }
#    
#
#    #--------------------
#    # We now have a normalized flow record. The rest of the logic works
#    # regardless of the Netflow version.
#    #--------------------
#
#    # Replace protocol ID with well-known name.
#    if [netflow][protocol] {
#        translate {
#            id => "netflow-nt-postproc-translate-protocol_name"
#            dictionary_path => "/usr/share/logstash/modules/netflow/configuration/logstash/dictionaries/iana_protocol_numbers.yml"
#            field => "[netflow][protocol]"
#            destination => "[netflow][protocol_name]"
#            fallback => "UNKNOWN"
#           
#        }
#
#        # lookup IANA service name for source and destination ports.
#        if [netflow][protocol] == 6 { # TCP
#            if [netflow][src_port] {
#                translate {
#                    id => "netflow-postproc-translate-src_port_name_TCP"
#                    dictionary_path => "/usr/share/logstash/modules/netflow/configuration/logstash/dictionaries/iana_service_names_tcp.yml"
#                    field => "[netflow][src_port]"
#                    destination => "[netflow][src_port_name]"
#                    fallback => "__UNKNOWN"
#                    
#                }
#            }
#            if [netflow][dst_port] {
#                translate {
#                    id => "netflow-postproc-translate-dst_port_name_TCP"
#                    dictionary_path => "/usr/share/logstash/modules/netflow/configuration/logstash/dictionaries/iana_service_names_tcp.yml"
#                    field => "[netflow][dst_port]"
#                    destination => "[netflow][dst_port_name]"
#                    fallback => "__UNKNOWN"
#                   
#                }
#            }
#        } else if [netflow][protocol] == 17 { # UDP
#            if [netflow][src_port] {
#                translate {
#                    id => "netflow-postproc-translate-src_port_name_UDP"
#                    dictionary_path => "/usr/share/logstash/modules/netflow/configuration/logstash/dictionaries/iana_service_names_udp.yml"
#                    field => "[netflow][src_port]"
#                    destination => "[netflow][src_port_name]"
#                    fallback => "__UNKNOWN"
#                   
#                }
#            }
#            if [netflow][dst_port] {
#                translate {
#                    id => "netflow-postproc-translate-dst_port_name_UDP"
#                    dictionary_path => "/usr/share/logstash/modules/netflow/configuration/logstash/dictionaries/iana_service_names_udp.yml"
#                    field => "[netflow][dst_port]"
#                    destination => "[netflow][dst_port_name]"
#                    fallback => "__UNKNOWN"
#                    
#                }
#            }
#        } else if [netflow][protocol] == 132 { # SCTP
#            if [netflow][src_port] {
#                translate {
#                    id => "netflow-nt-postproc-translate-src_port_name_sctp"
#                    dictionary_path => "/usr/share/logstash/modules/netflow/configuration/logstash/dictionaries/iana_service_names_sctp.yml"
#                    field => "[netflow][src_port]"
#                    destination => "[netflow][src_port_name]"
#                    fallback => "__UNKNOWN"
#                    
#                }
#            }
#            if [netflow][dst_port] {
#                translate {
#                    id => "netflow-nt-postproc-translate-dst_port_name_sctp"
#                    dictionary_path => "/usr/share/logstash/modules/netflow/configuration/logstash/dictionaries/iana_service_names_sctp.yml"
#                    field => "[netflow][dst_port]"
#                    destination => "[netflow][dst_port_name]"
#                    fallback => "__UNKNOWN"
#                    
#                }
#            }
#        } else if [netflow][protocol] == 33 { # DCCP
#            if [src_port] {
#                translate {
#                    id => "netflow-nt-postproc-translate-src_port_name_dccp"
#                    dictionary_path => "/usr/share/logstash/modules/netflow/configuration/logstash/dictionaries/iana_service_names_dccp.yml"
#                    field => "[netflow][src_port]"
#                    destination => "[netflow][src_port_name]"
#                    fallback => "__UNKNOWN"
#                   
#                }
#            }
#            if [netflow][dst_port] {
#                translate {
#                    id => "netflow-nt-postproc-translate-dst_port_name_dccp"
#                    dictionary_path => "/usr/share/logstash/modules/netflow/configuration/logstash/dictionaries/iana_service_names_dccp.yml"
#                    field => "[netflow][dst_port]"
#                    destination => "[netflow][dst_port_name]"
#                    fallback => "__UNKNOWN"
#                   
#                }
#            }
#        }
#
#        if [netflow][src_port_name] {
#            if [netflow][src_port_name] == "__UNKNOWN" {
#                mutate {
#                    id => "netflow-nt-postproc-src_port_name_unknown"
#                    replace => { "[netflow][src_port_name]" => "%{[protocol_name]}/%{[netflow][src_port]}" }
#                }
#            } else {
#                mutate {
#                    id => "netflow-nt-postproc-src_port_name-prepend-src_port"
#                    replace => { "[netflow][src_port_name]" => "%{[netflow][protocol_name]}/%{[netflow][src_port]} (%{[netflow][src_port_name]})" }
#                }
#            }
#        }
#        if [netflow][dst_port_name] {
#            if [netflow][dst_port_name] == "__UNKNOWN" {
#                mutate {
#                    id => "netflow-nt-postproc-dst_port_name_unknown"
#                    replace => { "[netflow][dst_port_name]" => "%{[netflow][protocol_name]}/%{[netflow][dst_port]}" }
#                }
#            } else {
#                mutate {
#                    id => "netflow-nt-postproc-dest_port_name-prepend-dst_port"
#                    replace => { "[netflow][dst_port_name]" => "%{[netflow][protocol_name]}/%{[netflow][dst_port]} (%{[netflow][dst_port_name]})" }
#                }
#            }
#        }
#    }
#
#
#    # Process TCP flags.
#    if [netflow][tcp_flags] {
#        # Add TCP flags label.
#        translate {
#            id => "netflow-nt-postproc-translate-tcp_flags_label"
#            dictionary_path => "/usr/share/logstash/modules/netflow/configuration/logstash/dictionaries/tcp_flags.yml"
#            field => "[netflow][tcp_flags]"
#            destination => "[netflow][tcp_flags_label]"
#            fallback => "%{[netflow][tcp_flags]}"
#            
#        }
#
#        # Create array of TCP flag tags.
#        ruby {
#            id => "netflow-nt-postproc-ruby-tcp_flags_tags"
#            code => "
#                flags =[]
#                if event.get('[netflow][tcp_flags]').to_i & 1 > 0
#                    flags.push('FIN')
#                end
#                if event.get('[netflow][tcp_flags]').to_i & 2 > 0
#                    flags.push('SYN')
#                end
#                if event.get('[netflow][tcp_flags]').to_i & 4 > 0
#                    flags.push('RST')
#                end
#                if event.get('[netflow][tcp_flags]').to_i & 8 > 0
#                    flags.push('PSH')
#                end
#                if event.get('[netflow][tcp_flags]').to_i & 16 > 0
#                    flags.push('ACK')
#                end
#                if event.get('[netflow][tcp_flags]').to_i & 32 > 0
#                    flags.push('URG')
#                end
#                if event.get('[netflow][tcp_flags]').to_i & 64 > 0
#                    flags.push('ECE')
#                end
#                if event.get('[netflow][tcp_flags]').to_i & 128 > 0
#                    flags.push('CWR')
#                end
#                event.set('[netflow][tcp_flag_tags]', flags)
#            "
#        }
#    }
#    mutate {
#       remove_field => ["message", "SRC_IP_COUNTRY", "DST_IP_COUNTRY", "SRC_IP_LOCATION", "DST_IP_LOCATION", "host", "out_bytes", "in_bytes", "out_pkts", "in_pkts" ]
#    }
#    mutate {
#        copy => {
#                "[netflow][src_addr]" => "[src][ip]"
#                "[netflow][dst_addr]" => "[dst][ip]"
#                "[netflow][src_port]" => "[src][port]"
#                "[netflow][dst_port]" => "[dst][port]"
#        }
#        rename => { "NTOPNG_INSTANCE_NAME" => "[host][name]" }
#    }
#  }
#}
#
#
